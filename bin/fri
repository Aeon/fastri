#!/usr/bin/env ruby
# fri: access RI documentation through DRb
# Copyright (C) 2006 Mauricio Fernandez <mfp@acm.org>
#

require 'rinda/ring'
require 'optparse'

# we bind to 127.0.0.1 by default, because otherwise Ruby will try with
# 0.0.0.0, which results in a DNS request, adding way too much latency
options = {
  :addr   => "127.0.0.1",
  :format =>
    case RUBY_PLATFORM
    when /win/
      if /darwin|cygwin/ =~ RUBY_PLATFORM
        "ansi"
      else
        "plain"
      end
    else
      "ansi"
    end,
  :width => 72,
  :lookup_order => [
    :exact, :exact_ci, :nested, :nested_ci, :partial, :partial_ci, 
    :nested_partial, :nested_partial_ci,
  ],
  :show_matches => false,
}
override_addr_env = false
optparser = OptionParser.new do |opts|
  opts.banner = "Usage: fri [options] <query>"

  opts.on("-s", "--bind ADDR", "Bind to ADDR for incoming DRb connections.",
          "(default: 127.0.0.1)") do |addr|
    options[:addr] = addr
    override_addr_env = true
  end

  order_mapping = {
    'e' => :exact,   'E' => :exact_ci,   'n' => :nested, 'N' => :nested_ci,
    'p' => :partial, 'P' => :partial_ci, 'x' => :nested_partial,
    'X' => :nested_partial_ci
  }
  opts.on("-O", "--order ORDER", "Specify lookup order.",
          "(default: eEnNpPxX)", "Uppercase: case-indep.",
          "e: exact, n: nested, p: partial",
          "x: nested and partial") do |order|
    options[:lookup_order] = order.split(//).map{|x| order_mapping[x]}.compact
  end

  opts.on("--show-matches", "Only show matching entries."){ options[:show_matches] = true }

  opts.on("-f", "--format FMT", "Format to use when displaying output:",
          "   ansi, plain (default: #{options[:format]})") do |format|
    options[:format] = format
  end

  opts.on("-w", "--width WIDTH", "Set the width of the output.") do |width|
    w = width.to_i
    options[:width] = w > 0 ? w : options[:width]
  end

  opts.on("-h", "--help", "Show this help message") do 
    puts opts
    exit
  end
end
optparser.parse!

if ARGV.empty?
  puts optparser
  exit
end

if override_addr_env
  addr = "druby://#{options[:addr]}:0"
else
  addr =  "druby://#{ENV["FASTRI_ADDR"]||options[:addr]}:0"
end

begin
  DRb.start_service(addr)
  ring_server = Rinda::RingFinger.primary
rescue Exception
  puts <<EOF
Couldn't initialize DRb and locate the Ring server.

Please make sure that:
 * the fastri-server is running, the server is bound to the correct interface,
   and the ACL setup allows connections from this host
 * fri is using the correct interface for incoming DRb requests:
   either set the FASTRI_ADDR environment variable, or use --bind ADDR, e.g
      export FASTRI_ADDR="192.168.1.12"
      fri Array
EOF
  exit(-1)
end
service = ring_server.read([:name, :FastRI, nil, nil])[2]
info_options = {
  :formatter => options[:format],
  :width     => options[:width],
  :lookup_order => options[:lookup_order],
}
if options[:show_matches]
  puts service.matches(ARGV[0], info_options).sort
else
  puts service.info(ARGV[0], info_options)
end
# vi: set sw=2 expandtab:
