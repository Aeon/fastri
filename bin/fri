#!/usr/bin/env ruby
# fri: access RI documentation through DRb
# Copyright (C) 2006 Mauricio Fernandez <mfp@acm.org>
#

require 'rinda/ring'
require 'optparse'

# we bind to 127.0.0.1 by default, because otherwise Ruby will try with
# 0.0.0.0, which results in a DNS request, adding way too much latency
options = {
  :addr   => "127.0.0.1",
  :format => "ansi"
}
override_addr_env = false
optparser = OptionParser.new do |opts|
  opts.banner = "Usage: fri [options] <query>"

  opts.on("-s", "--bind ADDR", "Bind to ADDR for incoming DRb connections.",
          "(default: 127.0.0.1)") do |addr|
    options[:addr] = addr
    override_addr_env = true
  end

  opts.on("-f", "--format FMT", "Format to use when displaying output:",
          "   ansi, plain (default: ansi)") do |format|
    options[:format] = format
  end

  opts.on("-h", "--help", "Show this help message") do 
    puts opts
    exit
  end
end
optparser.parse!

if ARGV.empty?
  puts optparser
  exit
end

if override_addr_env
  addr = "druby://#{options[:addr]}:0"
else
  addr =  "druby://#{ENV["FASTRI_ADDR"]||options[:addr]}:0"
end

begin
  DRb.start_service(addr)
  ring_server = Rinda::RingFinger.primary
rescue Exception
  puts <<EOF
Couldn't initialize DRb and locate the Ring server.

Please make sure that:
 * the fastri-server is running, the server is bound to the correct interface,
   and the ACL setup allows connections from this host
 * fri is using the correct interface for incoming DRb requests:
   either set the FASTRI_ADDR environment variable, or use --bind ADDR, e.g
      export FASTRI_ADDR="192.168.1.12"
      fri Array
EOF
  exit(-1)
end
service = ring_server.read([:name, :FastRI, nil, nil])[2]
puts service.info(ARGV[0], options[:format])
# vi: set sw=2 expandtab:
