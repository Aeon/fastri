#!/usr/bin/env ruby
# fri: access RI documentation through DRb
# Copyright (C) 2006 Mauricio Fernandez <mfp@acm.org>
#

require 'rinda/ring'
require 'optparse'
require 'fastri/util'
require 'fastri/full_text_index'

# we bind to 127.0.0.1 by default, because otherwise Ruby will try with
# 0.0.0.0, which results in a DNS request, adding way too much latency
options = {
  :addr   => "127.0.0.1",
  :format =>
    case RUBY_PLATFORM
    when /win/
      if /darwin|cygwin/ =~ RUBY_PLATFORM
        "ansi"
      else
        "plain"
      end
    else
      "ansi"
    end,
  :width => 72,
  :lookup_order => [
    :exact, :exact_ci, :nested, :nested_ci, :partial, :partial_ci, 
    :nested_partial, :nested_partial_ci,
  ],
  :show_matches => false,
  :do_full_text => false, 
  :full_text_dir => File.join(FastRI::Util.find_home, ".fastri-fulltext"),
}
override_addr_env = false
optparser = OptionParser.new do |opts|
  opts.banner = "Usage: fri [options] <query>"

  opts.on("-s", "--bind ADDR", "Bind to ADDR for incoming DRb connections.",
          "(default: 127.0.0.1)") do |addr|
    options[:addr] = addr
    override_addr_env = true
  end

  order_mapping = {
    'e' => :exact,   'E' => :exact_ci,   'n' => :nested, 'N' => :nested_ci,
    'p' => :partial, 'P' => :partial_ci, 'x' => :nested_partial,
    'X' => :nested_partial_ci, 'a' => :anywhere, 'A' => :anywhere_ci,
  }
  opts.on("-O", "--order ORDER", "Specify lookup order.",
          "(default: eEnNpPxX)", "Uppercase: case-indep.",
          "e:exact n:nested p:partial (completion)",
          "x:nested and partial",
          "a:match method name anywhere") do |order|
    options[:lookup_order] = order.split(//).map{|x| order_mapping[x]}.compact
  end

  opts.on("--show-matches", "Only show matching entries."){ options[:show_matches] = true }

  opts.on("-S", "--full-text", "Perform full-text search.") do 
    options[:do_full_text] = true
  end

  opts.on("-F", "--full-text-dir DIR", "Use full-text index in DIR",
          "(default: #{options[:full_text_dir]})") do |dir|
    options[:full_text_dir] = dir if dir
    options[:do_full_text]  = true
  end

  opts.on("-f", "--format FMT", "Format to use when displaying output:",
          "   ansi, plain (default: #{options[:format]})") do |format|
    options[:format] = format
  end

  opts.on("-w", "--width WIDTH", "Set the width of the output.") do |width|
    w = width.to_i
    options[:width] = w > 0 ? w : options[:width]
  end

  opts.on("-h", "--help", "Show this help message") do 
    puts opts
    exit
  end
end
optparser.parse!

if ARGV.empty?
  puts optparser
  exit
end

# {{{ try to find where the method comes from exactly
def help_method_extract(m) # :nodoc:
  unless m.inspect =~ %r[\A#<(?:Unbound)?Method: (.*?)>\Z]
    raise "Cannot parse result of #{m.class}#inspect: #{m.inspect}"
  end
  $1.sub(/\A.*?\((.*?)\)(.*)\Z/){ "#{$1}#{$2}" }.sub(/\./, "::").sub(/#<Class:(.*?)>#/) { "#{$1}::" }
end

def magic_help(query)
  if query =~ /\A(.*?)(#|::|\.)(.*)\Z/
    c, k, m = $1, $2, $3
    begin
      c = Object.const_get(c)
      m = case k
      when "#"
        c.instance_method(m)
      when "::"
        c.method(m)
      when "."
        begin
          c.method(m)
        rescue NameError
          c.instance_method(m)
        end
      end
      help_method_extract(m)
    rescue Exception
      query
    end
  else
    query
  end
end
help_query = magic_help(ARGV[0])

#{{{ determine the address to bind to
if override_addr_env
  addr_spec = options[:addr]
else
  addr_spec = ENV["FASTRI_ADDR"] || options[:addr]
end

ip   = addr_spec[/^[^:]+/]    || "127.0.0.1"
port = addr_spec[/:(\d+)/, 1] || 0
addr = "druby://#{ip}:#{port}"

#{{{ start DRb and perform request
begin
  DRb.start_service(addr)
  ring_server = Rinda::RingFinger.primary
rescue Exception
  puts <<EOF
Couldn't initialize DRb and locate the Ring server.

Please make sure that:
 * the fastri-server is running, the server is bound to the correct interface,
   and the ACL setup allows connections from this host
 * fri is using the correct interface for incoming DRb requests:
   either set the FASTRI_ADDR environment variable, or use --bind ADDR, e.g
      export FASTRI_ADDR="192.168.1.12"
      fri Array
EOF
  exit(-1)
end
service = ring_server.read([:name, :FastRI, nil, nil])[2]
info_options = {
  :formatter => options[:format],
  :width     => options[:width],
  :lookup_order => options[:lookup_order],
}

def display_fulltext_search_result(result)
  path = File.expand_path(result.path)
  gem_name, version, gem_path = FastRI::Util.gem_info_for_path(path)
  if gem_name
    rel_path = path[/#{Regexp.escape(gem_path)}\/(.*)/, 1]
    if rel_path
      entry_name = FastRI::Util.gem_relpath_to_full_name(rel_path)
    end
    puts "Found in #{gem_name} #{version}  #{entry_name}"
    context = result.context(100)
    from = (context.rindex("\n", context.index(result.query)) || -1) + 1
    to   = (context.index("\n", context.index(result.query)) || 0) - 1
    puts "  " + context[from..to]
    puts
  else
    puts "Found in #{path}:"
    context = result.context(100)
    from = (context.rindex("\n", context.index(result.query)) || -1) + 1
    to   = (context.index("\n", context.index(result.query)) || 0) - 1
    puts "  " + context[from..to]
    puts
  end
end

if options[:do_full_text]
  fulltext = File.join(options[:full_text_dir], "full_text.dat")
  suffixes = File.join(options[:full_text_dir], "suffixes.dat")
  index = FastRI::FullTextIndex.new_from_filenames(fulltext, suffixes)
  result = index.lookup(ARGV[0])
  if !result
    puts "nil"
  else
    display_fulltext_search_result(result)
    while result = index.next_match(result)
      display_fulltext_search_result(result)
    end
  end
  
  exit 0
end

if options[:show_matches]
  puts service.matches(help_query, info_options).sort
else
  puts service.info(help_query, info_options)
end
# vi: set sw=2 expandtab:
